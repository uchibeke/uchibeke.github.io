/**
  *DriveAPILib
  *
  * This file was automatically generated by APIMATIC BETA v2.0 on 03/09/2016
  */

'use strict';
angular.module('DriveAPILib').factory('FilesController',function($q,Configuration,HttpClient,APIHelper){
    return{
        /**
         * Creates a copy of the specified file.
         * @param {string} fileId    Required parameter: The ID of the file to copy.
         * @param {string|null} alt    Optional parameter: Data format for the response. (Acceptable values are: "json")
         * @param {bool|null} convert    Optional parameter: Whether to convert this file to the corresponding Google Docs format.
         * @param {string|null} fields    Optional parameter: Selector specifying which fields to include in a partial response.
         * @param {string|null} key    Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string|null} oauthToken    Optional parameter: OAuth 2.0 token for the current user.
         * @param {bool|null} ocr    Optional parameter: Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads.
         * @param {string|null} ocrLanguage    Optional parameter: If ocr is true, hints at the language to use. Valid values are BCP 47 codes.
         * @param {bool|null} pinned    Optional parameter: Whether to pin the head revision of the new copy. A file can have a maximum of 200 pinned revisions.
         * @param {bool|null} prettyPrint    Optional parameter: Returns response with indentations and line breaks.
         * @param {string|null} quotaUser    Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
         * @param {string|null} timedTextLanguage    Optional parameter: The language of the timed text.
         * @param {string|null} timedTextTrackName    Optional parameter: The timed text track name.
         * @param {string|null} userIp    Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
         * @param {string|null} visibility    Optional parameter: The visibility of the new file. This parameter is only relevant when the source is not a native Google Doc and convert=false. (Acceptable values are: "DEFAULT", "PRIVATE")
         *
         * @return {promise<string>}
         */
        createCopy : function(fileId, alt, convert, fields, key, oauthToken, ocr, ocrLanguage, pinned, prettyPrint, quotaUser, timedTextLanguage, timedTextTrackName, userIp, visibility){
            //Assign default values
            alt = alt || "json";
            convert = convert || false;
            ocr = ocr || false;
            pinned = pinned || false;
            prettyPrint = prettyPrint || true;
            visibility = visibility || "DEFAULT";

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/files/{fileId}/copy";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "fileId" : fileId
            });

            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "alt" : (null != alt)? alt: "json",
                "convert" : (null != convert)? convert: false,
                "fields" : fields,
                "key" : key,
                "oauth_token" : oauthToken,
                "ocr" : (null != ocr)? ocr: false,
                "ocrLanguage" : ocrLanguage,
                "pinned" : (null != pinned)? pinned: false,
                "prettyPrint" : (null != prettyPrint)? prettyPrint: true,
                "quotaUser" : quotaUser,
                "timedTextLanguage" : timedTextLanguage,
                "timedTextTrackName" : timedTextTrackName,
                "userIp" : userIp,
                "visibility" : (null != visibility)? visibility: "DEFAULT"
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "POST",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        },
        /**
         * Permanently deletes a file by ID. Skips the trash. The currently authenticated user must own the file.
         * @param {string} fileId    Required parameter: The ID of the file to delete.
         * @param {string|null} alt    Optional parameter: Data format for the response. (Acceptable values are: "json")
         * @param {string|null} fields    Optional parameter: Selector specifying which fields to include in a partial response.
         * @param {string|null} key    Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string|null} oauthToken    Optional parameter: OAuth 2.0 token for the current user.
         * @param {bool|null} prettyPrint    Optional parameter: Returns response with indentations and line breaks.
         * @param {string|null} quotaUser    Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
         * @param {string|null} userIp    Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
         *
         * @return {promise<void>}
         */
        mdelete : function(fileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp){
            //Assign default values
            alt = alt || "json";
            prettyPrint = prettyPrint || true;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/files/{fileId}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "fileId" : fileId
            });

            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "alt" : (null != alt)? alt: "json",
                "fields" : fields,
                "key" : key,
                "oauth_token" : oauthToken,
                "prettyPrint" : (null != prettyPrint)? prettyPrint: true,
                "quotaUser" : quotaUser,
                "userIp" : userIp
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "DELETE",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        },
        /**
         * Permanently deletes all of the user's trashed files.
         *
         * @return {promise<void>}
         */
        deleteEmptyTrash : function(){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/files/trash";
            
            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "DELETE",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        },
        /**
         * Generates a set of file IDs which can be provided in insert requests.
         * @param {string|null} alt    Optional parameter: Data format for the response. (Acceptable values are: "json")
         * @param {string|null} fields    Optional parameter: Selector specifying which fields to include in a partial response.
         * @param {string|null} key    Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {int|null} maxResults    Optional parameter: Maximum number of IDs to return.
         * @param {string|null} oauthToken    Optional parameter: OAuth 2.0 token for the current user.
         * @param {bool|null} prettyPrint    Optional parameter: Returns response with indentations and line breaks.
         * @param {string|null} quotaUser    Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
         * @param {string|null} space    Optional parameter: The space in which the IDs can be used to create new files. Supported values are 'drive' and 'appDataFolder'.
         * @param {string|null} userIp    Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
         *
         * @return {promise<GeneratedIds>}
         */
        getGenerateIds : function(alt, fields, key, maxResults, oauthToken, prettyPrint, quotaUser, space, userIp){
            //Assign default values
            alt = alt || "json";
            maxResults = maxResults || 10;
            prettyPrint = prettyPrint || true;
            space = space || "drive";

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/files/generateIds";
            
            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "alt" : (null != alt)? alt: "json",
                "fields" : fields,
                "key" : key,
                "maxResults" : (null != maxResults)? maxResults: 10,
                "oauth_token" : oauthToken,
                "prettyPrint" : (null != prettyPrint)? prettyPrint: true,
                "quotaUser" : quotaUser,
                "space" : (null != space)? space: "drive",
                "userIp" : userIp
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        },
        /**
         * Gets a file's metadata by ID.
         * @param {string} fileId    Required parameter: The ID for the file in question.
         * @param {bool|null} acknowledgeAbuse    Optional parameter: Whether the user is acknowledging the risk of downloading known malware or other abusive files.
         * @param {string|null} alt    Optional parameter: Data format for the response. (Acceptable values are: "json")
         * @param {string|null} fields    Optional parameter: Selector specifying which fields to include in a partial response.
         * @param {string|null} key    Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string|null} oauthToken    Optional parameter: OAuth 2.0 token for the current user.
         * @param {bool|null} prettyPrint    Optional parameter: Returns response with indentations and line breaks.
         * @param {string|null} projection    Optional parameter: This parameter is deprecated and has no function. (Acceptable values are: "BASIC", "FULL")
         * @param {string|null} quotaUser    Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
         * @param {string|null} revisionId    Optional parameter: Specifies the Revision ID that should be downloaded. Ignored unless alt=media is specified.
         * @param {bool|null} updateViewedDate    Optional parameter: Deprecated: Use files.update with modifiedDateBehavior=noChange, updateViewedDate=true and an empty request body.
         * @param {string|null} userIp    Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
         *
         * @return {promise<string>}
         */
        get : function(fileId, acknowledgeAbuse, alt, fields, key, oauthToken, prettyPrint, projection, quotaUser, revisionId, updateViewedDate, userIp){
            //Assign default values
            acknowledgeAbuse = acknowledgeAbuse || false;
            alt = alt || "json";
            prettyPrint = prettyPrint || true;
            updateViewedDate = updateViewedDate || false;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/files/{fileId}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "fileId" : fileId
            });

            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "acknowledgeAbuse" : (null != acknowledgeAbuse)? acknowledgeAbuse: false,
                "alt" : (null != alt)? alt: "json",
                "fields" : fields,
                "key" : key,
                "oauth_token" : oauthToken,
                "prettyPrint" : (null != prettyPrint)? prettyPrint: true,
                "projection" : projection,
                "quotaUser" : quotaUser,
                "revisionId" : revisionId,
                "updateViewedDate" : (null != updateViewedDate)? updateViewedDate: false,
                "userIp" : userIp
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        },
        /**
         * Insert a new file.
         * @param {string|null} alt    Optional parameter: Data format for the response. (Acceptable values are: "json")
         * @param {bool|null} convert    Optional parameter: Whether to convert this file to the corresponding Google Docs format.
         * @param {string|null} fields    Optional parameter: Selector specifying which fields to include in a partial response.
         * @param {string|null} key    Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string|null} oauthToken    Optional parameter: OAuth 2.0 token for the current user.
         * @param {bool|null} ocr    Optional parameter: Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads.
         * @param {string|null} ocrLanguage    Optional parameter: If ocr is true, hints at the language to use. Valid values are BCP 47 codes.
         * @param {bool|null} pinned    Optional parameter: Whether to pin the head revision of the uploaded file. A file can have a maximum of 200 pinned revisions.
         * @param {bool|null} prettyPrint    Optional parameter: Returns response with indentations and line breaks.
         * @param {string|null} quotaUser    Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
         * @param {string|null} timedTextLanguage    Optional parameter: The language of the timed text.
         * @param {string|null} timedTextTrackName    Optional parameter: The timed text track name.
         * @param {bool|null} useContentAsIndexableText    Optional parameter: Whether to use the content as indexable text.
         * @param {string|null} userIp    Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
         * @param {string|null} visibility    Optional parameter: The visibility of the new file. This parameter is only relevant when convert=false. (Acceptable values are: "DEFAULT", "PRIVATE")
         *
         * @return {promise<string>}
         */
        insert : function(alt, convert, fields, key, oauthToken, ocr, ocrLanguage, pinned, prettyPrint, quotaUser, timedTextLanguage, timedTextTrackName, useContentAsIndexableText, userIp, visibility){
            //Assign default values
            alt = alt || "json";
            convert = convert || false;
            ocr = ocr || false;
            pinned = pinned || false;
            prettyPrint = prettyPrint || true;
            useContentAsIndexableText = useContentAsIndexableText || false;
            visibility = visibility || "DEFAULT";

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/files";
            
            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "alt" : (null != alt)? alt: "json",
                "convert" : (null != convert)? convert: false,
                "fields" : fields,
                "key" : key,
                "oauth_token" : oauthToken,
                "ocr" : (null != ocr)? ocr: false,
                "ocrLanguage" : ocrLanguage,
                "pinned" : (null != pinned)? pinned: false,
                "prettyPrint" : (null != prettyPrint)? prettyPrint: true,
                "quotaUser" : quotaUser,
                "timedTextLanguage" : timedTextLanguage,
                "timedTextTrackName" : timedTextTrackName,
                "useContentAsIndexableText" : (null != useContentAsIndexableText)? useContentAsIndexableText: false,
                "userIp" : userIp,
                "visibility" : (null != visibility)? visibility: "DEFAULT"
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "POST",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        },
        /**
         * Lists the user's files.
         * @param {string|null} alt    Optional parameter: Data format for the response. (Acceptable values are: "json")
         * @param {string|null} corpus    Optional parameter: The body of items (files/documents) to which the query applies. (Acceptable values are: "DEFAULT", "DOMAIN")
         * @param {string|null} fields    Optional parameter: Selector specifying which fields to include in a partial response.
         * @param {string|null} key    Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {int|null} maxResults    Optional parameter: Maximum number of files to return.
         * @param {string|null} oauthToken    Optional parameter: OAuth 2.0 token for the current user.
         * @param {string|null} orderBy    Optional parameter: A comma-separated list of sort keys. Valid keys are 'createdDate', 'folder', 'lastViewedByMeDate', 'modifiedByMeDate', 'modifiedDate', 'quotaBytesUsed', 'recency', 'sharedWithMeDate', 'starred', and 'title'. Each key sorts ascending by default, but may be reversed with the 'desc' modifier. Example usage: ?orderBy=folder,modifiedDate desc,title. Please note that there is a current limitation for users with approximately one million files in which the requested sort order is ignored.
         * @param {string|null} pageToken    Optional parameter: Page token for files.
         * @param {bool|null} prettyPrint    Optional parameter: Returns response with indentations and line breaks.
         * @param {string|null} projection    Optional parameter: This parameter is deprecated and has no function. (Acceptable values are: "BASIC", "FULL")
         * @param {string|null} q    Optional parameter: Query string for searching files.
         * @param {string|null} quotaUser    Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
         * @param {string|null} spaces    Optional parameter: A comma-separated list of spaces to query. Supported values are 'drive', 'appDataFolder' and 'photos'.
         * @param {string|null} userIp    Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
         *
         * @return {promise<FileList>}
         */
        list : function(alt, corpus, fields, key, maxResults, oauthToken, orderBy, pageToken, prettyPrint, projection, q, quotaUser, spaces, userIp){
            //Assign default values
            alt = alt || "json";
            maxResults = maxResults || 100;
            prettyPrint = prettyPrint || true;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/files";
            
            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "alt" : (null != alt)? alt: "json",
                "corpus" : corpus,
                "fields" : fields,
                "key" : key,
                "maxResults" : (null != maxResults)? maxResults: 100,
                "oauth_token" : oauthToken,
                "orderBy" : orderBy,
                "pageToken" : pageToken,
                "prettyPrint" : (null != prettyPrint)? prettyPrint: true,
                "projection" : projection,
                "q" : q,
                "quotaUser" : quotaUser,
                "spaces" : spaces,
                "userIp" : userIp
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        },
        /**
         * Updates file metadata and/or content. This method supports patch semantics.
         * @param {string} fileId    Required parameter: The ID of the file to update.
         * @param {string|null} addParents    Optional parameter: Comma-separated list of parent IDs to add.
         * @param {string|null} alt    Optional parameter: Data format for the response. (Acceptable values are: "json")
         * @param {bool|null} convert    Optional parameter: This parameter is deprecated and has no function.
         * @param {string|null} fields    Optional parameter: Selector specifying which fields to include in a partial response.
         * @param {string|null} key    Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string|null} modifiedDateBehavior    Optional parameter: Determines the behavior in which modifiedDate is updated. This overrides setModifiedDate. (Acceptable values are: "fromBody", "fromBodyIfNeeded", "fromBodyOrNow", "noChange", "now", "nowIfNeeded")
         * @param {bool|null} newRevision    Optional parameter: Whether a blob upload should create a new revision. If false, the blob data in the current head revision is replaced. If true or not set, a new blob is created as head revision, and previous unpinned revisions are preserved for a short period of time. Pinned revisions are stored indefinitely, using additional storage quota, up to a maximum of 200 revisions. For details on how revisions are retained, see the Drive Help Center.
         * @param {string|null} oauthToken    Optional parameter: OAuth 2.0 token for the current user.
         * @param {bool|null} ocr    Optional parameter: Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads.
         * @param {string|null} ocrLanguage    Optional parameter: If ocr is true, hints at the language to use. Valid values are BCP 47 codes.
         * @param {bool|null} pinned    Optional parameter: Whether to pin the new revision. A file can have a maximum of 200 pinned revisions.
         * @param {bool|null} prettyPrint    Optional parameter: Returns response with indentations and line breaks.
         * @param {string|null} quotaUser    Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
         * @param {string|null} removeParents    Optional parameter: Comma-separated list of parent IDs to remove.
         * @param {bool|null} setModifiedDate    Optional parameter: Whether to set the modified date with the supplied modified date.
         * @param {string|null} timedTextLanguage    Optional parameter: The language of the timed text.
         * @param {string|null} timedTextTrackName    Optional parameter: The timed text track name.
         * @param {bool|null} updateViewedDate    Optional parameter: Whether to update the view date after successfully updating the file.
         * @param {bool|null} useContentAsIndexableText    Optional parameter: Whether to use the content as indexable text.
         * @param {string|null} userIp    Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
         *
         * @return {promise<string>}
         */
        patch : function(fileId, addParents, alt, convert, fields, key, modifiedDateBehavior, newRevision, oauthToken, ocr, ocrLanguage, pinned, prettyPrint, quotaUser, removeParents, setModifiedDate, timedTextLanguage, timedTextTrackName, updateViewedDate, useContentAsIndexableText, userIp){
            //Assign default values
            alt = alt || "json";
            convert = convert || false;
            newRevision = newRevision || true;
            ocr = ocr || false;
            pinned = pinned || false;
            prettyPrint = prettyPrint || true;
            setModifiedDate = setModifiedDate || false;
            updateViewedDate = updateViewedDate || true;
            useContentAsIndexableText = useContentAsIndexableText || false;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/files/{fileId}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "fileId" : fileId
            });

            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "addParents" : addParents,
                "alt" : (null != alt)? alt: "json",
                "convert" : (null != convert)? convert: false,
                "fields" : fields,
                "key" : key,
                "modifiedDateBehavior" : modifiedDateBehavior,
                "newRevision" : (null != newRevision)? newRevision: true,
                "oauth_token" : oauthToken,
                "ocr" : (null != ocr)? ocr: false,
                "ocrLanguage" : ocrLanguage,
                "pinned" : (null != pinned)? pinned: false,
                "prettyPrint" : (null != prettyPrint)? prettyPrint: true,
                "quotaUser" : quotaUser,
                "removeParents" : removeParents,
                "setModifiedDate" : (null != setModifiedDate)? setModifiedDate: false,
                "timedTextLanguage" : timedTextLanguage,
                "timedTextTrackName" : timedTextTrackName,
                "updateViewedDate" : (null != updateViewedDate)? updateViewedDate: true,
                "useContentAsIndexableText" : (null != useContentAsIndexableText)? useContentAsIndexableText: false,
                "userIp" : userIp
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "PATCH",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        },
        /**
         * Set the file's updated time to the current server time.
         * @param {string} fileId    Required parameter: The ID of the file to update.
         * @param {string|null} alt    Optional parameter: Data format for the response. (Acceptable values are: "json")
         * @param {string|null} fields    Optional parameter: Selector specifying which fields to include in a partial response.
         * @param {string|null} key    Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string|null} oauthToken    Optional parameter: OAuth 2.0 token for the current user.
         * @param {bool|null} prettyPrint    Optional parameter: Returns response with indentations and line breaks.
         * @param {string|null} quotaUser    Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
         * @param {string|null} userIp    Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
         *
         * @return {promise<string>}
         */
        createTouch : function(fileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp){
            //Assign default values
            alt = alt || "json";
            prettyPrint = prettyPrint || true;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/files/{fileId}/touch";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "fileId" : fileId
            });

            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "alt" : (null != alt)? alt: "json",
                "fields" : fields,
                "key" : key,
                "oauth_token" : oauthToken,
                "prettyPrint" : (null != prettyPrint)? prettyPrint: true,
                "quotaUser" : quotaUser,
                "userIp" : userIp
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "POST",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        },
        /**
         * Moves a file to the trash. The currently authenticated user must own the file.
         * @param {string} fileId    Required parameter: The ID of the file to trash.
         * @param {string|null} alt    Optional parameter: Data format for the response. (Acceptable values are: "json")
         * @param {string|null} fields    Optional parameter: Selector specifying which fields to include in a partial response.
         * @param {string|null} key    Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string|null} oauthToken    Optional parameter: OAuth 2.0 token for the current user.
         * @param {bool|null} prettyPrint    Optional parameter: Returns response with indentations and line breaks.
         * @param {string|null} quotaUser    Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
         * @param {string|null} userIp    Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
         *
         * @return {promise<string>}
         */
        createTrash : function(fileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp){
            //Assign default values
            alt = alt || "json";
            prettyPrint = prettyPrint || true;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/files/{fileId}/trash";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "fileId" : fileId
            });

            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "alt" : (null != alt)? alt: "json",
                "fields" : fields,
                "key" : key,
                "oauth_token" : oauthToken,
                "prettyPrint" : (null != prettyPrint)? prettyPrint: true,
                "quotaUser" : quotaUser,
                "userIp" : userIp
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "POST",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        },
        /**
         * Restores a file from the trash.
         * @param {string} fileId    Required parameter: The ID of the file to untrash.
         * @param {string|null} alt    Optional parameter: Data format for the response. (Acceptable values are: "json")
         * @param {string|null} fields    Optional parameter: Selector specifying which fields to include in a partial response.
         * @param {string|null} key    Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string|null} oauthToken    Optional parameter: OAuth 2.0 token for the current user.
         * @param {bool|null} prettyPrint    Optional parameter: Returns response with indentations and line breaks.
         * @param {string|null} quotaUser    Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
         * @param {string|null} userIp    Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
         *
         * @return {promise<string>}
         */
        createUntrash : function(fileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp){
            //Assign default values
            alt = alt || "json";
            prettyPrint = prettyPrint || true;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/files/{fileId}/untrash";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "fileId" : fileId
            });

            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "alt" : (null != alt)? alt: "json",
                "fields" : fields,
                "key" : key,
                "oauth_token" : oauthToken,
                "prettyPrint" : (null != prettyPrint)? prettyPrint: true,
                "quotaUser" : quotaUser,
                "userIp" : userIp
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "POST",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        },
        /**
         * Updates file metadata and/or content.
         * @param {string} fileId    Required parameter: The ID of the file to update.
         * @param {string|null} addParents    Optional parameter: Comma-separated list of parent IDs to add.
         * @param {string|null} alt    Optional parameter: Data format for the response. (Acceptable values are: "json")
         * @param {bool|null} convert    Optional parameter: This parameter is deprecated and has no function.
         * @param {string|null} fields    Optional parameter: Selector specifying which fields to include in a partial response.
         * @param {string|null} key    Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string|null} modifiedDateBehavior    Optional parameter: Determines the behavior in which modifiedDate is updated. This overrides setModifiedDate. (Acceptable values are: "fromBody", "fromBodyIfNeeded", "fromBodyOrNow", "noChange", "now", "nowIfNeeded")
         * @param {bool|null} newRevision    Optional parameter: Whether a blob upload should create a new revision. If false, the blob data in the current head revision is replaced. If true or not set, a new blob is created as head revision, and previous unpinned revisions are preserved for a short period of time. Pinned revisions are stored indefinitely, using additional storage quota, up to a maximum of 200 revisions. For details on how revisions are retained, see the Drive Help Center.
         * @param {string|null} oauthToken    Optional parameter: OAuth 2.0 token for the current user.
         * @param {bool|null} ocr    Optional parameter: Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads.
         * @param {string|null} ocrLanguage    Optional parameter: If ocr is true, hints at the language to use. Valid values are BCP 47 codes.
         * @param {bool|null} pinned    Optional parameter: Whether to pin the new revision. A file can have a maximum of 200 pinned revisions.
         * @param {bool|null} prettyPrint    Optional parameter: Returns response with indentations and line breaks.
         * @param {string|null} quotaUser    Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
         * @param {string|null} removeParents    Optional parameter: Comma-separated list of parent IDs to remove.
         * @param {bool|null} setModifiedDate    Optional parameter: Whether to set the modified date with the supplied modified date.
         * @param {string|null} timedTextLanguage    Optional parameter: The language of the timed text.
         * @param {string|null} timedTextTrackName    Optional parameter: The timed text track name.
         * @param {bool|null} updateViewedDate    Optional parameter: Whether to update the view date after successfully updating the file.
         * @param {bool|null} useContentAsIndexableText    Optional parameter: Whether to use the content as indexable text.
         * @param {string|null} userIp    Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
         *
         * @return {promise<string>}
         */
        update : function(fileId, addParents, alt, convert, fields, key, modifiedDateBehavior, newRevision, oauthToken, ocr, ocrLanguage, pinned, prettyPrint, quotaUser, removeParents, setModifiedDate, timedTextLanguage, timedTextTrackName, updateViewedDate, useContentAsIndexableText, userIp){
            //Assign default values
            alt = alt || "json";
            convert = convert || false;
            newRevision = newRevision || true;
            ocr = ocr || false;
            pinned = pinned || false;
            prettyPrint = prettyPrint || true;
            setModifiedDate = setModifiedDate || false;
            updateViewedDate = updateViewedDate || true;
            useContentAsIndexableText = useContentAsIndexableText || false;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/files/{fileId}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "fileId" : fileId
            });

            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "addParents" : addParents,
                "alt" : (null != alt)? alt: "json",
                "convert" : (null != convert)? convert: false,
                "fields" : fields,
                "key" : key,
                "modifiedDateBehavior" : modifiedDateBehavior,
                "newRevision" : (null != newRevision)? newRevision: true,
                "oauth_token" : oauthToken,
                "ocr" : (null != ocr)? ocr: false,
                "ocrLanguage" : ocrLanguage,
                "pinned" : (null != pinned)? pinned: false,
                "prettyPrint" : (null != prettyPrint)? prettyPrint: true,
                "quotaUser" : quotaUser,
                "removeParents" : removeParents,
                "setModifiedDate" : (null != setModifiedDate)? setModifiedDate: false,
                "timedTextLanguage" : timedTextLanguage,
                "timedTextTrackName" : timedTextTrackName,
                "updateViewedDate" : (null != updateViewedDate)? updateViewedDate: true,
                "useContentAsIndexableText" : (null != useContentAsIndexableText)? useContentAsIndexableText: false,
                "userIp" : userIp
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "PUT",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        },
        /**
         * Subscribe to changes on a file
         * @param {string} fileId    Required parameter: The ID for the file in question.
         * @param {bool|null} acknowledgeAbuse    Optional parameter: Whether the user is acknowledging the risk of downloading known malware or other abusive files.
         * @param {string|null} alt    Optional parameter: Data format for the response. (Acceptable values are: "json")
         * @param {string|null} fields    Optional parameter: Selector specifying which fields to include in a partial response.
         * @param {string|null} key    Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string|null} oauthToken    Optional parameter: OAuth 2.0 token for the current user.
         * @param {bool|null} prettyPrint    Optional parameter: Returns response with indentations and line breaks.
         * @param {string|null} projection    Optional parameter: This parameter is deprecated and has no function. (Acceptable values are: "BASIC", "FULL")
         * @param {string|null} quotaUser    Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
         * @param {string|null} revisionId    Optional parameter: Specifies the Revision ID that should be downloaded. Ignored unless alt=media is specified.
         * @param {bool|null} updateViewedDate    Optional parameter: Deprecated: Use files.update with modifiedDateBehavior=noChange, updateViewedDate=true and an empty request body.
         * @param {string|null} userIp    Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
         *
         * @return {promise<Channel>}
         */
        createWatch : function(fileId, acknowledgeAbuse, alt, fields, key, oauthToken, prettyPrint, projection, quotaUser, revisionId, updateViewedDate, userIp){
            //Assign default values
            acknowledgeAbuse = acknowledgeAbuse || false;
            alt = alt || "json";
            prettyPrint = prettyPrint || true;
            updateViewedDate = updateViewedDate || false;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/files/{fileId}/watch";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "fileId" : fileId
            });

            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "acknowledgeAbuse" : (null != acknowledgeAbuse)? acknowledgeAbuse: false,
                "alt" : (null != alt)? alt: "json",
                "fields" : fields,
                "key" : key,
                "oauth_token" : oauthToken,
                "prettyPrint" : (null != prettyPrint)? prettyPrint: true,
                "projection" : projection,
                "quotaUser" : quotaUser,
                "revisionId" : revisionId,
                "updateViewedDate" : (null != updateViewedDate)? updateViewedDate: false,
                "userIp" : userIp
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "POST",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        }
    }
});