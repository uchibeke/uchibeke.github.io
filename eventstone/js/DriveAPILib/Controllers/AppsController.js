/**
  *DriveAPILib
  *
  * This file was automatically generated by APIMATIC BETA v2.0 on 03/09/2016
  */

'use strict';
angular.module('DriveAPILib').factory('AppsController',function($q,Configuration,HttpClient,APIHelper){
    return{
        /**
         * Gets a specific app.
         * @param {string} appId    Required parameter: The ID of the app.
         * @param {string|null} alt    Optional parameter: Data format for the response. (Acceptable values are: "json")
         * @param {string|null} fields    Optional parameter: Selector specifying which fields to include in a partial response.
         * @param {string|null} key    Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string|null} oauthToken    Optional parameter: OAuth 2.0 token for the current user.
         * @param {bool|null} prettyPrint    Optional parameter: Returns response with indentations and line breaks.
         * @param {string|null} quotaUser    Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
         * @param {string|null} userIp    Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
         *
         * @return {promise<App>}
         */
        get : function(appId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp){
            //Assign default values
            alt = alt || "json";
            prettyPrint = prettyPrint || true;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/apps/{appId}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "appId" : appId
            });

            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "alt" : (null != alt)? alt: "json",
                "fields" : fields,
                "key" : key,
                "oauth_token" : oauthToken,
                "prettyPrint" : (null != prettyPrint)? prettyPrint: true,
                "quotaUser" : quotaUser,
                "userIp" : userIp
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        },
        /**
         * Lists a user's installed apps.
         * @param {string|null} alt    Optional parameter: Data format for the response. (Acceptable values are: "json")
         * @param {string|null} appFilterExtensions    Optional parameter: A comma-separated list of file extensions for open with filtering. All apps within the given app query scope which can open any of the given file extensions will be included in the response. If appFilterMimeTypes are provided as well, the result is a union of the two resulting app lists.
         * @param {string|null} appFilterMimeTypes    Optional parameter: A comma-separated list of MIME types for open with filtering. All apps within the given app query scope which can open any of the given MIME types will be included in the response. If appFilterExtensions are provided as well, the result is a union of the two resulting app lists.
         * @param {string|null} fields    Optional parameter: Selector specifying which fields to include in a partial response.
         * @param {string|null} key    Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string|null} languageCode    Optional parameter: A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
         * @param {string|null} oauthToken    Optional parameter: OAuth 2.0 token for the current user.
         * @param {bool|null} prettyPrint    Optional parameter: Returns response with indentations and line breaks.
         * @param {string|null} quotaUser    Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
         * @param {string|null} userIp    Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
         *
         * @return {promise<AppList>}
         */
        list : function(alt, appFilterExtensions, appFilterMimeTypes, fields, key, languageCode, oauthToken, prettyPrint, quotaUser, userIp){
            //Assign default values
            alt = alt || "json";
            appFilterExtensions = appFilterExtensions || "";
            appFilterMimeTypes = appFilterMimeTypes || "";
            prettyPrint = prettyPrint || true;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/apps";
            
            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "alt" : (null != alt)? alt: "json",
                "appFilterExtensions" : appFilterExtensions,
                "appFilterMimeTypes" : appFilterMimeTypes,
                "fields" : fields,
                "key" : key,
                "languageCode" : languageCode,
                "oauth_token" : oauthToken,
                "prettyPrint" : (null != prettyPrint)? prettyPrint: true,
                "quotaUser" : quotaUser,
                "userIp" : userIp
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        }
    }
});